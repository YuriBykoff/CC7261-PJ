# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import server_pb2 as server__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServerServiceStub(object):
    """Serviço principal para comunicação entre os servidores
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterOrUpdateRemoteServer = channel.unary_unary(
                '/server_comms.ServerService/RegisterOrUpdateRemoteServer',
                request_serializer=server__pb2.ServerInfo.SerializeToString,
                response_deserializer=server__pb2.ServerRegistrationResponse.FromString,
                _registered_method=True)
        self.GetServerList = channel.unary_unary(
                '/server_comms.ServerService/GetServerList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=server__pb2.ServerListResponse.FromString,
                _registered_method=True)
        self.GetTime = channel.unary_unary(
                '/server_comms.ServerService/GetTime',
                request_serializer=server__pb2.GetTimeRequest.SerializeToString,
                response_deserializer=server__pb2.GetTimeResponse.FromString,
                _registered_method=True)
        self.AdjustServerTime = channel.unary_unary(
                '/server_comms.ServerService/AdjustServerTime',
                request_serializer=server__pb2.AdjustTimeRequest.SerializeToString,
                response_deserializer=server__pb2.AdjustTimeResponse.FromString,
                _registered_method=True)
        self.ReceiveHeartbeat = channel.unary_unary(
                '/server_comms.ServerService/ReceiveHeartbeat',
                request_serializer=server__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=server__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.AnnounceCoordinator = channel.unary_unary(
                '/server_comms.ServerService/AnnounceCoordinator',
                request_serializer=server__pb2.CoordinatorAnnouncement.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateUserRPC = channel.unary_unary(
                '/server_comms.ServerService/CreateUserRPC',
                request_serializer=server__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=server__pb2.UserResponse.FromString,
                _registered_method=True)
        self.ReplicateUserCreation = channel.unary_unary(
                '/server_comms.ServerService/ReplicateUserCreation',
                request_serializer=server__pb2.UserInfo.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.FollowUserRPC = channel.unary_unary(
                '/server_comms.ServerService/FollowUserRPC',
                request_serializer=server__pb2.FollowRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.UnfollowUserRPC = channel.unary_unary(
                '/server_comms.ServerService/UnfollowUserRPC',
                request_serializer=server__pb2.FollowRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.ReplicateFollow = channel.unary_unary(
                '/server_comms.ServerService/ReplicateFollow',
                request_serializer=server__pb2.FollowRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.ReplicateUnfollow = channel.unary_unary(
                '/server_comms.ServerService/ReplicateUnfollow',
                request_serializer=server__pb2.FollowRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.CreatePostRPC = channel.unary_unary(
                '/server_comms.ServerService/CreatePostRPC',
                request_serializer=server__pb2.CreatePostRequest.SerializeToString,
                response_deserializer=server__pb2.CreatePostResponse.FromString,
                _registered_method=True)
        self.ReplicatePostCreation = channel.unary_unary(
                '/server_comms.ServerService/ReplicatePostCreation',
                request_serializer=server__pb2.PostInfo.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.DeletePostRPC = channel.unary_unary(
                '/server_comms.ServerService/DeletePostRPC',
                request_serializer=server__pb2.DeletePostRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.ReplicatePostDeletion = channel.unary_unary(
                '/server_comms.ServerService/ReplicatePostDeletion',
                request_serializer=server__pb2.ReplicatePostDeletionRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.ReplicateNotification = channel.unary_unary(
                '/server_comms.ServerService/ReplicateNotification',
                request_serializer=server__pb2.ReplicateNotificationRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.ForwardMarkNotificationsRead = channel.unary_unary(
                '/server_comms.ServerService/ForwardMarkNotificationsRead',
                request_serializer=server__pb2.MarkNotificationsReadRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ReplicateMarkNotificationsRead = channel.unary_unary(
                '/server_comms.ServerService/ReplicateMarkNotificationsRead',
                request_serializer=server__pb2.MarkNotificationsReadRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)
        self.SendMessageRPC = channel.unary_unary(
                '/server_comms.ServerService/SendMessageRPC',
                request_serializer=server__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=server__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.ReplicateMessage = channel.unary_unary(
                '/server_comms.ServerService/ReplicateMessage',
                request_serializer=server__pb2.ReplicateMessageRequest.SerializeToString,
                response_deserializer=server__pb2.ReplicationResponse.FromString,
                _registered_method=True)


class ServerServiceServicer(object):
    """Serviço principal para comunicação entre os servidores
    """

    def RegisterOrUpdateRemoteServer(self, request, context):
        """RPC para um servidor se registrar ou atualizar suas informações em outro servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerList(self, request, context):
        """RPC para obter a lista de servidores conhecidos por um nó
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTime(self, request, context):
        """RPC para obter o tempo atual de um servidor (usado no Berkeley)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustServerTime(self, request, context):
        """RPC para instruir um servidor a ajustar seu relógio (usado no Berkeley)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveHeartbeat(self, request, context):
        """RPC para enviar um heartbeat (não-coordenador para coordenador)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnnounceCoordinator(self, request, context):
        """RPC para anunciar quem é o novo coordenador após uma eleição
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUserRPC(self, request, context):
        """--- Novo RPC para Criação de Usuário (Chamado no Líder) ---
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateUserCreation(self, request, context):
        """--- Novo RPC para Replicar Criação de Usuário (Líder -> Seguidores) ---
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FollowUserRPC(self, request, context):
        """----- Novas Mensagens e RPCs para Follow/Unfollow -----

        Requisição para seguir ou deixar de seguir um usuário
        Contém ambos os IDs, pois será usada tanto na chamada ao líder quanto na replicação.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnfollowUserRPC(self, request, context):
        """RPC para solicitar ao coordenador que processe uma ação de deixar de seguir
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateFollow(self, request, context):
        """RPC para replicar a ação de seguir (Líder -> Seguidores)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateUnfollow(self, request, context):
        """RPC para replicar a ação de deixar de seguir (Líder -> Seguidores)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePostRPC(self, request, context):
        """----- Fim das Novas Mensagens e RPCs para Follow/Unfollow -----

        ----- Novos RPCs para Posts -----

        RPC para solicitar a criação de um novo post (Chamado no Coordenador)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicatePostCreation(self, request, context):
        """RPC para replicar a criação de um post (Coordenador -> Seguidores)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePostRPC(self, request, context):
        """--- Novos RPCs para Deletar Posts ---

        RPC para solicitar a deleção de um post (Chamado no Coordenador)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicatePostDeletion(self, request, context):
        """RPC para replicar a deleção de um post (Coordenador -> Seguidores)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateNotification(self, request, context):
        """RPC para replicar notificação (para mark-read e outras futuras replicações)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForwardMarkNotificationsRead(self, request, context):
        """RPCs para Marcar Notificações como Lidas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateMarkNotificationsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessageRPC(self, request, context):
        """RPCs para Mensagens Privadas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterOrUpdateRemoteServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterOrUpdateRemoteServer,
                    request_deserializer=server__pb2.ServerInfo.FromString,
                    response_serializer=server__pb2.ServerRegistrationResponse.SerializeToString,
            ),
            'GetServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=server__pb2.ServerListResponse.SerializeToString,
            ),
            'GetTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTime,
                    request_deserializer=server__pb2.GetTimeRequest.FromString,
                    response_serializer=server__pb2.GetTimeResponse.SerializeToString,
            ),
            'AdjustServerTime': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustServerTime,
                    request_deserializer=server__pb2.AdjustTimeRequest.FromString,
                    response_serializer=server__pb2.AdjustTimeResponse.SerializeToString,
            ),
            'ReceiveHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveHeartbeat,
                    request_deserializer=server__pb2.HeartbeatRequest.FromString,
                    response_serializer=server__pb2.HeartbeatResponse.SerializeToString,
            ),
            'AnnounceCoordinator': grpc.unary_unary_rpc_method_handler(
                    servicer.AnnounceCoordinator,
                    request_deserializer=server__pb2.CoordinatorAnnouncement.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateUserRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUserRPC,
                    request_deserializer=server__pb2.CreateUserRequest.FromString,
                    response_serializer=server__pb2.UserResponse.SerializeToString,
            ),
            'ReplicateUserCreation': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateUserCreation,
                    request_deserializer=server__pb2.UserInfo.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'FollowUserRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.FollowUserRPC,
                    request_deserializer=server__pb2.FollowRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'UnfollowUserRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.UnfollowUserRPC,
                    request_deserializer=server__pb2.FollowRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'ReplicateFollow': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateFollow,
                    request_deserializer=server__pb2.FollowRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'ReplicateUnfollow': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateUnfollow,
                    request_deserializer=server__pb2.FollowRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'CreatePostRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePostRPC,
                    request_deserializer=server__pb2.CreatePostRequest.FromString,
                    response_serializer=server__pb2.CreatePostResponse.SerializeToString,
            ),
            'ReplicatePostCreation': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicatePostCreation,
                    request_deserializer=server__pb2.PostInfo.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'DeletePostRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePostRPC,
                    request_deserializer=server__pb2.DeletePostRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'ReplicatePostDeletion': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicatePostDeletion,
                    request_deserializer=server__pb2.ReplicatePostDeletionRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'ReplicateNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateNotification,
                    request_deserializer=server__pb2.ReplicateNotificationRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'ForwardMarkNotificationsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ForwardMarkNotificationsRead,
                    request_deserializer=server__pb2.MarkNotificationsReadRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReplicateMarkNotificationsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateMarkNotificationsRead,
                    request_deserializer=server__pb2.MarkNotificationsReadRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
            'SendMessageRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessageRPC,
                    request_deserializer=server__pb2.SendMessageRequest.FromString,
                    response_serializer=server__pb2.SendMessageResponse.SerializeToString,
            ),
            'ReplicateMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateMessage,
                    request_deserializer=server__pb2.ReplicateMessageRequest.FromString,
                    response_serializer=server__pb2.ReplicationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server_comms.ServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('server_comms.ServerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ServerService(object):
    """Serviço principal para comunicação entre os servidores
    """

    @staticmethod
    def RegisterOrUpdateRemoteServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/RegisterOrUpdateRemoteServer',
            server__pb2.ServerInfo.SerializeToString,
            server__pb2.ServerRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/GetServerList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            server__pb2.ServerListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/GetTime',
            server__pb2.GetTimeRequest.SerializeToString,
            server__pb2.GetTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AdjustServerTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/AdjustServerTime',
            server__pb2.AdjustTimeRequest.SerializeToString,
            server__pb2.AdjustTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReceiveHeartbeat',
            server__pb2.HeartbeatRequest.SerializeToString,
            server__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnnounceCoordinator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/AnnounceCoordinator',
            server__pb2.CoordinatorAnnouncement.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUserRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/CreateUserRPC',
            server__pb2.CreateUserRequest.SerializeToString,
            server__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateUserCreation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicateUserCreation',
            server__pb2.UserInfo.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FollowUserRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/FollowUserRPC',
            server__pb2.FollowRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnfollowUserRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/UnfollowUserRPC',
            server__pb2.FollowRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateFollow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicateFollow',
            server__pb2.FollowRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateUnfollow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicateUnfollow',
            server__pb2.FollowRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePostRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/CreatePostRPC',
            server__pb2.CreatePostRequest.SerializeToString,
            server__pb2.CreatePostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicatePostCreation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicatePostCreation',
            server__pb2.PostInfo.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeletePostRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/DeletePostRPC',
            server__pb2.DeletePostRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicatePostDeletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicatePostDeletion',
            server__pb2.ReplicatePostDeletionRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicateNotification',
            server__pb2.ReplicateNotificationRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForwardMarkNotificationsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ForwardMarkNotificationsRead',
            server__pb2.MarkNotificationsReadRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateMarkNotificationsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicateMarkNotificationsRead',
            server__pb2.MarkNotificationsReadRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessageRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/SendMessageRPC',
            server__pb2.SendMessageRequest.SerializeToString,
            server__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_comms.ServerService/ReplicateMessage',
            server__pb2.ReplicateMessageRequest.SerializeToString,
            server__pb2.ReplicationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
