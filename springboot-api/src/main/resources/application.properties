# ==================================================
# Configurações de Logging
# ==================================================

# Nível de log raiz (padrão para tudo)
logging.level.root=WARN

# Nível de log para pacotes específicos do Spring (reduz a verbosidade)
logging.level.org.springframework=WARN
logging.level.org.springframework.boot=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework.data=WARN
logging.level.org.springframework.transaction=WARN

# Nível de log para Hibernate (SQL gerado pode ser útil em DEBUG)
logging.level.org.hibernate=WARN
logging.level.org.hibernate.SQL=WARN 
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN # Descomente para ver parâmetros de query

# Nível de log para o nosso pacote da aplicação (manter INFO ou DEBUG)
logging.level.com.example.projeto_sd=INFO

# Nível de log para gRPC (pode ser útil em DEBUG)
logging.level.io.grpc=INFO

# ==================================================
# Configurações Gerais da Aplicação
# ==================================================

# Configuração do Servidor gRPC (Porta via env var GRPC_PORT, default 9090)
grpc.server.port=${GRPC_PORT:9090}
grpc.server.address=0.0.0.0
grpc.server.enabled=true

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.open-in-view=false

# Configuração do Banco de Dados (Valores via env vars do docker-compose)
spring.datasource.url=jdbc:postgresql://${DB_HOST:db}:${DB_PORT:5432}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# ==================================================
# Configurações do Spring Cloud Consul
# ==================================================

# Endereço do Consul Agent (Nome do serviço no docker-compose)
spring.cloud.consul.host=consul_server
spring.cloud.consul.port=8500

# Habilitar registro e descoberta
spring.cloud.consul.discovery.enabled=true
spring.cloud.consul.discovery.register=true
spring.cloud.consul.discovery.prefer-ip-address=true

# Nome do serviço como registrado no Consul (Vem da env var SPRING_APPLICATION_NAME)
spring.cloud.consul.discovery.service-name=${spring.application.name}

# ID único da instância no Consul (Combina nome, SERVER_ID e porta gRPC das env vars)
spring.cloud.consul.discovery.instance-id=${spring.application.name}-${SERVER_ID}-${grpc.server.port}

# Metadados adicionais (opcional)
# spring.cloud.consul.discovery.tags=grpc, java
# Adiciona a porta gRPC aos metadados para descoberta por clientes
spring.cloud.consul.discovery.metadata.gRPC_port=${grpc.server.port}
# Adiciona o ID do servidor aos metadados (usando hífen em vez de ponto)
spring.cloud.consul.discovery.metadata.server-id=${server.id}

# Configurar health check (usando Spring Boot Actuator)
spring.cloud.consul.discovery.health-check-path=/actuator/health
spring.cloud.consul.discovery.health-check-interval=15s
spring.cloud.consul.discovery.health-check-timeout=10s
spring.cloud.consul.discovery.health-check-critical-timeout=30s

# ==================================================
# Configurações do Spring Boot Actuator
# ==================================================

# Expor endpoint de health do Actuator via web
management.endpoints.web.exposure.include=health
# Mostrar detalhes no health check (útil para debug)
management.endpoint.health.show-details=always 